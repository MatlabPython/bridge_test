<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	 http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
	<context:annotation-config />

	<!-- 配置Spring自动装配功能 多个包用逗号隔开 -->
	<context:component-scan base-package="com.gsafety.*"></context:component-scan>


	<!-- 配置Spring自动加载配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:mail.properties</value>
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>

	<!--启用注解方式的AOP -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- redis连接池 -->
	<bean id="jedisConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxActive}"></property>
		<property name="maxIdle" value="${redis.maxIdle}"></property>
		<property name="maxWaitMillis" value="${redis.maxWait}"></property>
		<property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
	</bean>
	<!-- redis连接工厂 -->
	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"></property>
		<property name="port" value="${redis.port}"></property>
		<property name="password" value="${redis.password}"></property>
		<property name="poolConfig" ref="jedisConfig"></property>
	</bean>
	<!-- redis操作模板，这里采用尽量面向对象的模板 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- 如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to 
			String！！！ -->
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<!--开启事务 -->
		<property name="enableTransactionSupport" value="true" />
	</bean>

	<!-- 邮件发送器 -->
	<bean id="JavaMailSenderImpl" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}" />
		<property name="port" value="${mail.port}" />
		<property name="username" value="${mail.username}" />
		<property name="password" value="${mail.password}" />
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="javaMailProperties">
			<props>
				<!-- 验证身份 -->
				<prop key="mail.smtps.auth">true</prop>
				<prop key="mail.smtp.ssl.enable">true</prop>
				<prop key="mail.transport.protocol">smtp</prop>
			</props>
		</property>
	</bean>

	<bean id="mail" class="com.sun.mail.util.MailSSLSocketFactory">
		<property name="TrustAllHosts" value="true" />
	</bean>

	<bean id="simpleMailMessage" class="org.springframework.mail.SimpleMailMessage">
		<!-- 发件人email -->
		<property name="from" value="${mail.username}" />
	</bean>



	<!-- Spring druid 动态配置切换数据源 与AOP集成实现动态切换 -->
	<bean id="DataSource13" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.test13.url}" />
		<property name="username" value="${jdbc.test13.username}" />
		<property name="password" value="${jdbc.test13.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="filters" value="log4j" />
		<property name="proxyFilters">
			<list>
				<ref bean="log-filter" />
			</list>
		</property>
	</bean>

	<bean id="DataSource15" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.test15.url}" />
		<property name="username" value="${jdbc.test15.username}" />
		<property name="password" value="${jdbc.test15.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />


		<property name="filters" value="log4j" />
		<property name="proxyFilters">
			<list>
				<ref bean="log-filter" />
			</list>
		</property>
	</bean>

	<bean id="DataSourceHbase" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${HBASE.driverClassName}" />
		<property name="url" value="${HBASE.url}" />
		<property name="username" value="${HBASE.username}" />
		<property name="password" value="${HBASE.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="filters" value="log4j" />
		<property name="proxyFilters">
			<list>
				<ref bean="log-filter" />
			</list>
		</property>
	</bean>
	<bean id="DataSourceHive" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${Hive.driverClassName}" />
		<property name="url" value="${Hive.url}" />
		<property name="username" value="${Hive.username}" />
		<property name="password" value="${Hive.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="filters" value="log4j" />
		<property name="proxyFilters">
			<list>
				<ref bean="log-filter" />
			</list>
		</property>
	</bean>


	<!-- 动态DataSource配置 -->
	<bean id="dynamicDataSource" class="com.gsafety.dataMapper.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="DataSource13" value-ref="DataSource13" />
				<entry key="DataSource15" value-ref="DataSource15" />
				<entry key="DataSourceHbase" value-ref="DataSourceHbase" />
				<entry key="DataSourceHive" value-ref="DataSourceHive" />

			</map>
		</property>
		<property name="defaultTargetDataSource" ref="DataSource13" />
	</bean>
	<!-- 创建jdbcTemplate，并且通过IOC的依赖注入的构造注入方式注入Druid连接池对象，那么获取到jdbcTemplate后就能够直接使用 
		这里配置的是动态切换的数据源对象dynamicDataSource -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg name="dataSource" ref="dynamicDataSource"></constructor-arg>
	</bean>
	<!-- Spring druid 日志拦截器bean -->

	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
		<property name="connectionLogEnabled" value="true" />
		<property name="statementLogEnabled" value="true" />
		<property name="resultSetLogEnabled" value="true" />
		<property name="statementExecutableSqlLogEnable" value="true" />

	</bean>


	<!-- Spring druid 定时任务集成 尚未测试 -->

	<bean id="SpringQtzJob" name="SpringQtzjob" class="com.gsafety.quartz.SpringQtzjob" />

	<bean id="SpringQtzJobMethod"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="SpringQtzJob" />
		</property>
		<property name="targetMethod">
			<!-- 要执行的方法名称 -->
			<value>execute</value>
		</property>
	</bean>
	<!-- ======================== 调度触发器 ======================== -->
	<bean id="CronTriggerBean"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="SpringQtzJobMethod"></property>
		<property name="cronExpression" value="0/0 * * * * ?"></property>
	</bean>




</beans>